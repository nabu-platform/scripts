inject(nabu.settings())
[] projects = null
forceJre ?= false

jmods = configure(prompt: "We need to create a java version with javafx embedded, this requires 'jmods', you can download them here for your system: https://gluonhq.com/products/javafx/. Where did you unzip them?", key: "jmods")
jlink = configure(prompt: "To create images, we need jlink, where can it be found on your system?", key: "jlink", defaultValue: nabu.findInstalled("jlink")/path)
jpackage = configure(prompt: "To create images, we need jpackage, where can it be found on your system?", key: "jpackage", defaultValue: nabu.findInstalled("jpackage", package: "default-jdk")/path)

os = java.lang.System.getProperty("os.name")

# windows
if (os ~ "(?i).*win.*")
	type = "exe"
# apple
else if (os ~ "(?i).*(mac|darwin).*")
	type = "dmg"
# might need
else if (findInstalled("apt-get", install: false)/path != null)
	type = "deb"
	# need fakeroot to build deb packages
	fakeroot = nabu.findInstalled("fakeroot")/path
else
	type = "rpm"

# Build a custom java runtime
jre = nabuApplications + "/jre"
if (file.exists(jre) && forceJre)
	file.delete(jre)
if (!file.exists(jre) || forceJre)
	system.eval(jlink + " --module-path '" + jmods + ":mods' --add-modules ALL-MODULE-PATH,java.base,java.naming,java.logging,java.sql --output " + jre)


path = nabuWorkspace + "/packaging-developer"
system.cd(path)
jar = first(file.list("target", fileRegex: ".*\.jar"))
zip = first(file.list("target", fileRegex: ".*\.zip"))

if (jar == null || zip == null)
	system.mvn("clean package")
	jar = first(file.list("target", fileRegex: ".*\.jar"))
	zip = first(file.list("target", fileRegex: ".*\.zip"))
	if (jar == null || zip == null)
		throw("Could not find or create developer package")

entries = unzip(file.read("target/" + jar))
for (entry : keys(entries))
	if (entry ~ ".*/MANIFEST.MF")
		version = replace("(?s).*Build-Time:[\s]*([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z.*", "$1$2$3$4$5$6", entries[/entry])

if (version == null)
	throw("Could not get correct version")

temporary = "/tmp/developer-" + uuid()
system.mkdir(temporary)
system.cp("target/" + zip, temporary)
system.cd(temporary)
system.unzip(zip)

mainJar = first(file.list(temporary + "/lib", fileRegex: "eai-developer-.*\.jar"))

logo = nabuWorkspace + "/eai-developer/src/main/resources/icon.png"
command = jpackage + " --input " + nabuApplications + "/developer/lib"
	+ " --name 'Nabu Developer'"
	+ " --java-options '-Xmx8096m -Dprism.maxvram=2048m'"
	+ " --main-jar " + mainJar
	+ " --main-class 'be.nabu.eai.developer.Main'"
	+ " --runtime-image " + jre
	+ " --icon " + logo
	+ " --app-version " + version
	+ " --vendor 'Alexander Verbruggen'"
	+ " --type " + type
	+ " --dest " + nabuApplications

# Build a runnable package
system.eval(command)

# Remove the tmp folder
file.delete(temporary)