## This script will package both maven assemblies and modules
[] project ?= null
type ?= null
force ?= false
inject(nabu.settings())

if (type == "repository" || type == null)
	# make sure we have the latest pom installed for module management
	pathToInstalledPom = homeFolder + "/.m2/repository/be/nabu/modules/1.0-SNAPSHOT/modules-1.0-SNAPSHOT.pom"
	poms = nabuWorkspace + "/poms"
	if (!file.exists(pathToInstalledPom) || file.modified(pathToInstalledPom) < file.modified(poms + "/modules.xml"))
		echo("Installing changed modules pom")
		if (!file.exists(poms))
			throw("Could not find pom files")
		system.mvn("install:install-file", "-Dpackaging=pom", "-Dfile=" + poms + "/modules.xml", "-DpomFile=" + poms + "/modules.xml")
	else
		echo("Skipping module pom")

	# loop over all modules
	system.cd(nabuRepository)
	modules = series()
	for (file : file.list(directoryRegex: ".git", fileRegex: null, recursive: true))
		file = replace("/.git$", "", file)
		if (project == null || position(file, project) >= 0 || position(replace("/", ".", file), project) >= 0)
			path = nabuRepository + "/" + file
			if (file.exists(path + "/.git") && file.exists(path + "/pom.xml"))
				system.cd(path)
				pom = xml.objectify(file.read("pom.xml"))
				dependencies = series()
				if (pom/dependencies != null)
					dependencies = resolve(derive(lambda(x, x/groupId + "." + x/artifactId), pom/dependencies/dependency))
				module = structure(name: replace("/", ".", file), type: "repository", path: path, dependencies: dependencies)
				modules = resolve(merge(modules, module))

	sorted = series()
	previousSize = -1
	size = 0
	start = date()
	echo("Calculating dependency order for packaging...")
	while (size != previousSize)
		sortStart = date()
		sortedNames = sorted/name
		unsorted = resolve(filter(lambda(x, x !? sorted), modules))
		for (module : unsorted)
			missing = filter(lambda(x, x !? sortedNames), module/dependencies)
			if (size(missing) == 0)
				sorted = resolve(merge(sorted, module))
		previousSize = size
		size = size(sorted)

	unsorted = filter(lambda(x, x !? sorted), modules)
	echo("Sorted " + size(sorted) + "/" + size(modules) + " modules (" + (date() - start) + "ms)")
	if (size(unsorted) > 0)
		echo("Unsorted", unsorted)
		abort()

	counter = 1
	for (module : sorted)
		path = module/path
		# if it is a git repository, check it
		system.cd(path)
		changed = true
		# we want to check the latest build
		latest = nabuBuilds + "/modules/" + module/name + "/latest.nar"
		if (file.exists(latest))
			changed = linux.changed(file.modified(latest))/changed
		if (changed || force)
			system.mvn("clean", "install", "-Duser.timezone=UTC")
			# according to the modules pom, it will be built in the tmp folder
			pom = xml.objectify(file.read("pom.xml"))
			expectedBuildPath = "/tmp/" + pom/groupId + "." + pom/artifactId + "/" + pom/groupId + "." + pom/artifactId + "." + pom/version + ".jar"
			if (file.exists(expectedBuildPath))
				entries = unzip(file.read(expectedBuildPath))
				for (entry : keys(entries))
					if (entry ~ ".*/MANIFEST.MF")
						buildTime = replace("(?s).*Build-Time:[\s]*([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z.*", "$1$2$3$4$5$6", entries[/entry])
						if (buildTime == null)
							buildTime = format("yyyyMMddHHmmss", date: date())
				newFile = nabuBuilds + "/modules/" + module/name + "/" + module/name + "." + pom/version + "." + buildTime + ".nar"
				# copy the file
				file.write(newFile, file.read(expectedBuildPath))
				# remove a potentially existing symbolic link and create a new symbolic link
				if (file.exists(latest))
					file.delete(latest)
				system.ln("-s", newFile, latest)
				echo("[" + counter + "] New build for " + module/name)
			else
				echo("[" + counter + "] Build failed for " + module/name + ", could not find file: " + expectedBuildPath)
		else
			echo("[" + counter + "] Skipping package for " + module/name)
		counter = counter + 1

if (type == "java" || type == null)
	system.cd(nabuWorkspace)
	# it is not easy to determine whether something has changed, we would need to figure out all the libraries involved and check them
	# it is easier in this case just to build it and check if it's changed
	for (file : file.list(directoryRegex: "packaging-.*"))
		path = nabuWorkspace + "/" + file
		name = replace("packaging-", "", file)
		if (project == null || position(name, project) >= 0)
			system.cd(path)
			latest = nabuBuilds + "/applications/" + name + "/latest.zip"
			# check if we have changed anything
			# if there is no latest build yet, we definitely need a new one
			changes = series()
			changed = !file.exists(latest)
			if (!changed)
				dependencies = split("\n", system.mvn("dependency:tree"))
				dependencies = filter(lambda(x, x ~ ".*be\.nabu\..*"), dependencies)
				dependencies = replace(".*be\.nabu\..*?:([^:]+).*", "$1", dependencies)
				# filter out any remainders like "-----" 
				dependencies = filter(lambda(x, x ~ "[\w]+[\w-]*"), dependencies)
				changed = false
				# for each dependency, we check if the target jar has changed since the last modified of the latest build
				since = file.modified(latest)
				for (dependency : dependencies)
					jarFile = first(file.list(nabuWorkspace + "/" + dependency + "/target", fileRegex: ".*\.jar"))
					changedJar = jarFile == null || file.modified(nabuWorkspace + "/" + dependency + "/target/" + jarFile) > since
					if (changedJar)
						changed = true
						changes = resolve(merge(changes, dependency))
			if (changed || force)
				result = system.mvn("clean", "package", "-Duser.timezone=UTC")
				jar = first(file.list("target", fileRegex: ".*\.jar"))
				zip = first(file.list("target", fileRegex: ".*\.zip"))
				if (zip == null)
					echo("Build failed for application " + name)
				else
					entries = unzip(file.read("target/" + jar))
					buildTime = null
					for (entry : keys(entries))
						if (entry ~ ".*/MANIFEST.MF")
							buildTime = replace("(?s).*Build-Time:[\s]*([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z.*", "$1$2$3$4$5$6", entries[/entry])
					if (buildTime == null)
						buildTime = format("yyyyMMddHHmmss", date: date())
					newFile = nabuBuilds + "/applications/" + name + "/" + replace("(\.zip)$", "." + buildTime + "$1", zip)
					file.write(newFile, file.read("target/" + zip))
					# symbolic link
					if (file.exists(latest))
						file.delete(latest)
					system.ln("-s", newFile, latest)
					echo("New build for " + name + " based on " + size(changed) + " changed dependencies")
					echo("\t" + join(", ", changes))
			else
				echo("Skipping package for " + name)
