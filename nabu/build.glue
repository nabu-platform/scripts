## This script will build any changed libraries
[] project ?= null
type ?= null
force ?= false
inject(nabu.settings())
# whether to install it immediately in the repository/applications
install ?= true

pathToInstalledPom = homeFolder + "/.m2/repository/be/nabu/core/1.0-SNAPSHOT/core-1.0-SNAPSHOT.pom"
poms = nabuWorkspace + "/poms"
if (!file.exists(pathToInstalledPom) || file.modified(pathToInstalledPom) < file.modified(poms + "/core.xml"))
	echo("Installing changed core pom")
	if (!file.exists(poms))
		throw("Could not find pom files")
	system.mvn("install:install-file", "-Dpackaging=pom", "-Dfile=" + poms + "/core.xml", "-DpomFile=" + poms + "/core.xml")
else
	echo("Skipping core pom")
system.cd(nabuWorkspace)
supportedProjects = series()

# If you are not targetting a specific project, rebuild everything
if (size(project) == 0)
	echo("Listing supported projects...")
	for (file : file.list(directoryRegex: ".*", fileRegex: null, recursive: false))
		path = nabuWorkspace + "/" + file
		if (file.exists(path + "/pom.xml") && file !~ "^packaging-.*")
			supportedProjects = resolve(merge(supportedProjects, file))

	echo("Retrieving dependencies for projects...")
	projects = series()
	for (file : supportedProjects)
		path = nabuWorkspace + "/" + file
		if (file.exists(path + "/pom.xml") && file !~ "^packaging-.*")
			pom = xml.objectify(file.read(path + "/pom.xml"))
			dependencies = series()
			# we need to build a memory dependency tree to build in the correct order
			# eai-module-maven is a circular dependency for historic reasons, ignore it
			if (pom/dependencies != null)
				dependencies = resolve(filter(lambda(x, x ? supportedProjects), pom/dependencies/dependency/artifactId))	# && x != "eai-module-maven"
			project = structure(name: file, type: "java", path: path, dependencies: dependencies)
			projects = resolve(merge(projects, project))
	sorted = series()
	previousSize = -1
	size = 0
	start = date()
	echo("Calculating dependency order for building...")
	while (size != previousSize)
		sortStart = date()
		sortedNames = sorted/name
		unsorted = resolve(filter(lambda(x, x !? sorted), projects))
		for (project : unsorted)
			missing = filter(lambda(x, x !? sortedNames), project/dependencies)
			if (size(missing) == 0)
				sorted = resolve(merge(sorted, project))
		previousSize = size
		size = size(sorted)

	unsorted = filter(lambda(x, x !? sorted), projects)
	echo("Sorted " + size(sorted) + "/" + size(projects) + " java projects (" + (date() - start) + "ms)")
	if (size(unsorted) > 0)
		echo("Unsorted", unsorted)
		abort()
else
	sorted = resolve(derive(lambda(x, structure(name: x, type: "java", path: nabuWorkspace + "/" + x)), project))
failed = series()
for (project : sorted)
	system.cd(project/path)
	changeResult = linux.changed()
	build = force || changeResult/changed
	if (build)	
		start = date()
		if (changeResult/changed == null)
			echo("[" + ($index + 1) + "] Building project: " + project/name + " because no compiled version could be found")
		else
			echo("[" + ($index + 1) + "] Building project: " + project/name + " because " + size(changeResult/changedFiles) + " changes were detected in the last " + changeResult/diffmin + " minutes")
		#result = system.exec("mvn clean install")
		result = system.mvn("clean", "install")
		if (result ~ "(?s).*BUILD FAILURE.*")
			failed = merge(failed, project)
			echo("\tBuild failed (" + (date() - start) + "ms)")
			answer = input("\tShould we continue? [Y/n] ")
			if (answer == "n")
				abort()
		else
			echo("\tBuild successful (" + (date() - start) + "ms)")
			built = first(file.list("target", ".*\.jar$"))
			if (built != null)
				for (file : file.list(nabuApplications, fileRegex: "\Q" + built + "\E", recursive: true))
					echo("\tUpdating application file: " + file)
					file.write(nabuApplications + "/" + file, file.read("target/" + built))
				for (file : file.list(nabuRepository, fileRegex: "\Q" + built + "\E", recursive: true))
					echo("\tUpdating repository file: " + file)
					file.write(nabuRepository + "/" + file, file.read("target/" + built))
	else
		echo("[" + ($index + 1) + "] Skipping " + project/name)
if (size(failed) > 0)
	echo("These projects failed: ", failed/name)